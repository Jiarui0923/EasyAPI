"""
Task Management Module
------------------------

This module defines the `Task` class, which represents a computational task that can be executed asynchronously.
The class handles task initialization, tracking execution progress, storing task-related data, and managing task resources.

Classes:
--------
Task
    A class that represents a computational task. It manages task states, execution times, and the handling of resources.

Methods:
--------
__init__(self, access_id='', algorithm_id='', input_data={}, required_resources={})
    Initializes a new task with the given parameters.

__repr__(self)
    Returns a string representation of the task's state.

_get_time(self)
    Returns the current time in UTC.

_execute_start(self)
    Marks the task as in progress and records the start time.

_execute_end(self)
    Marks the task as complete and records the end time.

execute(self, algorithmlib, resources={})
    Executes the task using the specified algorithm and resources.

cancel(self)
    Cancels the task if it is running asynchronously.
"""

from uuid import uuid4
from datetime import datetime, timezone


class Task(object):
    """
    Represents a computational task that can be executed asynchronously.
    
    Attributes:
    ----------
    task_id : str
        A unique identifier for the task.
    access_id : str
        The ID used for access control of the task.
    algorithm_id : str
        The ID of the algorithm to be used for executing the task.
    input_data : dict
        The input data required by the algorithm.
    output_data : object
        The output data generated by the task after execution.
    in_progress : bool
        A flag indicating whether the task is currently in progress.
    is_done : bool
        A flag indicating whether the task has been completed.
    required_resources : dict
        The resources required to execute the task.
    create_time : datetime
        The timestamp when the task was created.
    start_time : datetime
        The timestamp when the task started executing.
    done_time : datetime
        The timestamp when the task finished executing.
    error : str
        The error message if the task fails during execution.
    _asyncio_task : object
        A reference to the asynchronous task if executed in an async context.
    """
    
    def __init__(self, access_id='', algorithm_id='', input_data={}, required_resources={}):
        """
        Initializes a new task with the given parameters.
        
        Parameters:
        ----------
        access_id : str, optional
            The ID used for access control of the task (default is '').
        algorithm_id : str, optional
            The ID of the algorithm to be used for executing the task (default is '').
        input_data : dict, optional
            The input data required by the algorithm (default is an empty dictionary).
        required_resources : dict, optional
            The resources required to execute the task (default is an empty dictionary).
        """
        self.task_id = str(uuid4())
        self.access_id = access_id
        self.algorithm_id = algorithm_id
        self.input_data = input_data
        self.output_data = None
        self.in_progress = False
        self.is_done = False
        self.required_resources = required_resources
        self.create_time = self._get_time()
        self.start_time = None
        self.done_time = None
        self.error = None
        self._asyncio_task = None
    
    def __repr__(self):
        """
        Returns a string representation of the task's state.
        
        Returns:
        -------
        str
            A string representation of the task, including the creation time, task ID, and completion status.
        """
        return f'<({self.create_time}){self.task_id} is_done:{self.is_done}>'
    
    def _get_time(self):
        """
        Returns the current time in UTC.
        
        Returns:
        -------
        datetime
            The current time in UTC.
        """
        return datetime.now(timezone.utc)
    
    def _execute_start(self):
        """
        Marks the task as in progress and records the start time.
        """
        self.in_progress = True
        self.start_time = self._get_time()
    
    def _execute_end(self):
        """
        Marks the task as complete and records the end time.
        """
        self.in_progress = False
        self.is_done = True
        self.done_time = self._get_time()
    
    def execute(self, algorithmlib, resources={}):
        """
        Executes the task using the specified algorithm and resources.
        
        Parameters:
        ----------
        algorithmlib : dict
            A dictionary of available algorithms.
        resources : dict, optional
            A dictionary of resources required for task execution (default is an empty dictionary).
        
        Returns:
        -------
        object
            The output data generated by the task after execution.
        """
        self._execute_start()
        algorithm = algorithmlib[self.algorithm_id]
        succ, output = algorithm(self.input_data, resources=resources)
        
        if not succ:
            self.error = output
        else:
            self.output_data = output
        
        self._execute_end()
        return output
    
    def cancel(self):
        """
        Cancels the task if it is running asynchronously.
        """
        if self._asyncio_task is not None:
            self._asyncio_task.cancel()
